// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FinalGroupMVCPrj.Models;

public partial class LifeShareLearnContext : DbContext
{
    public LifeShareLearnContext()
    {
    }

    public LifeShareLearnContext(DbContextOptions<LifeShareLearnContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TAdmin> TAdmins { get; set; }

    public virtual DbSet<TChatMessageTeacher> TChatMessageTeachers { get; set; }

    public virtual DbSet<TChatRoomTeacher> TChatRoomTeachers { get; set; }

    public virtual DbSet<TCity> TCities { get; set; }

    public virtual DbSet<TCityDistrict> TCityDistricts { get; set; }

    public virtual DbSet<TCoupon> TCoupons { get; set; }

    public virtual DbSet<TCouponConditionList> TCouponConditionLists { get; set; }

    public virtual DbSet<TCourseField> TCourseFields { get; set; }

    public virtual DbSet<TCourseSubject> TCourseSubjects { get; set; }

    public virtual DbSet<TCoursework> TCourseworks { get; set; }

    public virtual DbSet<TCourseworkFile> TCourseworkFiles { get; set; }

    public virtual DbSet<TLessonCourse> TLessonCourses { get; set; }

    public virtual DbSet<TLessonEvaluation> TLessonEvaluations { get; set; }

    public virtual DbSet<TMember> TMembers { get; set; }

    public virtual DbSet<TMemberCitiesList> TMemberCitiesLists { get; set; }

    public virtual DbSet<TMemberFavCourse> TMemberFavCourses { get; set; }

    public virtual DbSet<TMemberFavTeacher> TMemberFavTeachers { get; set; }

    public virtual DbSet<TMemberGetPush> TMemberGetPushes { get; set; }

    public virtual DbSet<TMemberLoginLog> TMemberLoginLogs { get; set; }

    public virtual DbSet<TMemberWishField> TMemberWishFields { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderDetail> TOrderDetails { get; set; }

    public virtual DbSet<TPushLayout> TPushLayouts { get; set; }

    public virtual DbSet<TPushMessage> TPushMessages { get; set; }

    public virtual DbSet<TServiceForm> TServiceForms { get; set; }

    public virtual DbSet<TTeacher> TTeachers { get; set; }

    public virtual DbSet<TTeacherApplyLog> TTeacherApplyLogs { get; set; }

    public virtual DbSet<TTeacherImage> TTeacherImages { get; set; }

    public virtual DbSet<TTeacherSubject> TTeacherSubjects { get; set; }

    public virtual DbSet<TVenue> TVenues { get; set; }

    public virtual DbSet<TVenueProviderInfo> TVenueProviderInfos { get; set; }

    public virtual DbSet<TVideoCourse> TVideoCourses { get; set; }

    public virtual DbSet<TVideoCourseEvaluation> TVideoCourseEvaluations { get; set; }

    public virtual DbSet<TVideoCourseQa> TVideoCourseQas { get; set; }

    public virtual DbSet<TVideoUploadUrl> TVideoUploadUrls { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=LifeShareLearn;Integrated Security=True;Encrypt=False;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TAdmin>(entity =>
        {
            entity.HasKey(e => e.FEmployeeId).HasName("PK_tAdims");

            entity.Property(e => e.FEmployeeId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TChatMessageTeacher>(entity =>
        {
            entity.Property(e => e.FMessageId).ValueGeneratedNever();

            entity.HasOne(d => d.FChatRoom).WithMany(p => p.TChatMessageTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatMessageTeacher_tChatRoomTeacher");
        });

        modelBuilder.Entity<TChatRoomTeacher>(entity =>
        {
            entity.Property(e => e.ChatRoomId).ValueGeneratedNever();

            entity.HasOne(d => d.FMember).WithMany(p => p.TChatRoomTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatRoomTeacher_tMember");

            entity.HasOne(d => d.FTeacher).WithMany(p => p.TChatRoomTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatRoomTeacher_tTeacher");
        });

        modelBuilder.Entity<TCity>(entity =>
        {
            entity.Property(e => e.FCityId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TCityDistrict>(entity =>
        {
            entity.HasOne(d => d.FCity).WithMany(p => p.TCityDistricts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tCityDistricts_tCity");
        });

        modelBuilder.Entity<TCoupon>(entity =>
        {
            entity.HasOne(d => d.FCouponCondition).WithMany(p => p.TCoupons).HasConstraintName("FK_tCoupon_tCouponConditionList");
        });

        modelBuilder.Entity<TCourseSubject>(entity =>
        {
            entity.HasKey(e => e.FSubjectId).HasName("PK_tCourseSubjecs");

            entity.HasOne(d => d.FField).WithMany(p => p.TCourseSubjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tCourseSubjecs_tCourseFields");
        });

        modelBuilder.Entity<TCoursework>(entity =>
        {
            entity.HasOne(d => d.FOrderDetail).WithMany(p => p.TCourseworks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tCoursework_tOrderDetail");
        });

        modelBuilder.Entity<TCourseworkFile>(entity =>
        {
            entity.Property(e => e.FCourseworkFileId).ValueGeneratedNever();

            entity.HasOne(d => d.FCoursework).WithMany(p => p.TCourseworkFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tCourseworkFile_tCoursework");
        });

        modelBuilder.Entity<TLessonCourse>(entity =>
        {
            entity.HasOne(d => d.FTeacher).WithMany(p => p.TLessonCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tLessonCourse_tTeacher");
        });

        modelBuilder.Entity<TLessonEvaluation>(entity =>
        {
            entity.HasKey(e => e.FLessonEvalId).HasName("PK_tLessonCourseEvaluation");

            entity.HasOne(d => d.FMember).WithMany(p => p.TLessonEvaluations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tLessonEvaluation_tMember");

            entity.HasOne(d => d.FOrderDetail).WithMany(p => p.TLessonEvaluations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tLessonEvaluation_tOrderDetail");
        });

        modelBuilder.Entity<TMember>(entity =>
        {
            entity.Property(e => e.FPhone).IsFixedLength();
        });

        modelBuilder.Entity<TMemberCitiesList>(entity =>
        {
            entity.HasKey(e => e.FMcitiesId).HasName("PK_tMemberCitesList");

            entity.HasOne(d => d.FCity).WithMany(p => p.TMemberCitiesLists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberCitesList_tCity");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberCitiesLists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberCitesList_tMember");
        });

        modelBuilder.Entity<TMemberFavCourse>(entity =>
        {
            entity.HasOne(d => d.FLessonCourse).WithMany(p => p.TMemberFavCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberFavCourses_tLessonCourse");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberFavCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberFavCourses_tMember");
        });

        modelBuilder.Entity<TMemberFavTeacher>(entity =>
        {
            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberFavTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberFavTeachers_tMember");

            entity.HasOne(d => d.FTeacher).WithMany(p => p.TMemberFavTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberFavTeachers_tTeacher");
        });

        modelBuilder.Entity<TMemberGetPush>(entity =>
        {
            entity.HasOne(d => d.FPushMessage).WithMany(p => p.TMemberGetPushes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberGetPush_tPushMessage");
        });

        modelBuilder.Entity<TMemberLoginLog>(entity =>
        {
            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberLoginLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberLoginLog_tMember");
        });

        modelBuilder.Entity<TMemberWishField>(entity =>
        {
            entity.HasOne(d => d.FField).WithMany(p => p.TMemberWishFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberWishFields_tCourseFields");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberWishFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMemberWishFields_tMember");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasOne(d => d.FMember).WithMany(p => p.TOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tOrder_tMember");
        });

        modelBuilder.Entity<TOrderDetail>(entity =>
        {
            entity.HasOne(d => d.FLessonCourse).WithMany(p => p.TOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tOrderDetail_tLessonCourse");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tOrderDetail_tOrder");
        });

        modelBuilder.Entity<TPushMessage>(entity =>
        {
            entity.HasOne(d => d.FEmployee).WithMany(p => p.TPushMessages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tPushMessage_tAdmins");

            entity.HasOne(d => d.FPushLayout).WithMany(p => p.TPushMessages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tPushMessage_tPushLayout");
        });

        modelBuilder.Entity<TServiceForm>(entity =>
        {
            entity.HasOne(d => d.FEmployee).WithMany(p => p.TServiceForms).HasConstraintName("FK_tServiceForm_tAdims");
        });

        modelBuilder.Entity<TTeacher>(entity =>
        {
            entity.HasOne(d => d.FMember).WithMany(p => p.TTeachers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tTeacher_tMember");
        });

        modelBuilder.Entity<TTeacherApplyLog>(entity =>
        {
            entity.HasOne(d => d.FMember).WithMany(p => p.TTeacherApplyLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tTeacherApplyLog_tMember");
        });

        modelBuilder.Entity<TTeacherImage>(entity =>
        {
            entity.HasOne(d => d.FTeacher).WithMany(p => p.TTeacherImages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tTeacherImages_tTeacher");
        });

        modelBuilder.Entity<TTeacherSubject>(entity =>
        {
            entity.HasKey(e => e.FTeacherSujectsId).HasName("PK_tTeacherSujects");

            entity.HasOne(d => d.FSubject).WithMany(p => p.TTeacherSubjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tTeacherSujects_tCourseSubjecs");

            entity.HasOne(d => d.FTeacher).WithMany(p => p.TTeacherSubjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tTeacherSujects_tTeacher");
        });

        modelBuilder.Entity<TVenue>(entity =>
        {
            entity.HasOne(d => d.FVenueProvider).WithMany(p => p.TVenues)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tVenue_tVenueProviderInfo");
        });

        modelBuilder.Entity<TVenueProviderInfo>(entity =>
        {
            entity.Property(e => e.FPassword).IsFixedLength();
        });

        modelBuilder.Entity<TVideoCourse>(entity =>
        {
            entity.Property(e => e.FNote).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}